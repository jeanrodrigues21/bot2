import logger from '../logger.js';

/**
 * M√≥dulo de Estrat√©gias de Trading
 * 
 * Cont√©m todas as estrat√©gias de compra e venda do bot.
 * Mant√©m a l√≥gica original funcionando e adiciona novas estrat√©gias.
 */
export default class TradingStrategies {
  constructor(config) {
    this.config = config;
    
    // Configura√ß√µes das estrat√©gias
    this.strategies = {
      // Estrat√©gia original: comprar na m√≠nima hist√≥rica
      buyAtLow: {
        enabled: true,
        name: 'Compra na M√≠nima Hist√≥rica'
      },
      
      // Nova estrat√©gia: comprar na queda da m√°xima
      buyOnDrop: {
        enabled: true,
        name: 'Compra na Queda da M√°xima',
        dropPercentage: config.buyOnDropPercent || 0.7 // Configur√°vel pelo usu√°rio
      }
    };
  }

  /**
   * ESTRAT√âGIA ORIGINAL - Comprar na m√≠nima hist√≥rica
   * Esta √© a l√≥gica que j√° estava funcionando no tradingBot.js
   */
  shouldBuyAtLow(priceHistory, currentPrice, dailyLow, dailyHigh, lastBuyTime) {
    try {
      // Verifica√ß√µes b√°sicas (l√≥gica original mantida)
      if (priceHistory.length < this.config.minHistoryForAnalysis) {
        return { shouldBuy: false, reason: 'Hist√≥rico insuficiente' };
      }

      if (dailyHigh === dailyLow) {
        return { shouldBuy: false, reason: 'Sem varia√ß√£o de pre√ßo' };
      }

      // Verificar varia√ß√£o di√°ria m√≠nima (l√≥gica original)
      const dailyVariation = ((dailyHigh - dailyLow) / dailyLow) * 100;
      if (dailyVariation < this.config.minPriceChange) {
        return { shouldBuy: false, reason: `Varia√ß√£o di√°ria insuficiente: ${dailyVariation.toFixed(2)}%` };
      }

      // Verificar se est√° pr√≥ximo da m√≠nima di√°ria (l√≥gica original)
      const priceFromLow = ((currentPrice - dailyLow) / dailyLow) * 100;
      
      if (priceFromLow <= this.config.buyThresholdFromLow) {
        // Verificar tend√™ncia de alta recente (l√≥gica original)
        const recentPrices = priceHistory
          .slice(-this.config.recentTrendWindow)
          .map(p => p.price);
        
        if (recentPrices.length >= this.config.recentTrendWindow) {
          const halfLength = Math.floor(recentPrices.length / 2);
          const firstHalfAvg = recentPrices.slice(0, halfLength).reduce((a, b) => a + b, 0) / halfLength;
          const secondHalfAvg = recentPrices.slice(halfLength).reduce((a, b) => a + b, 0) / (recentPrices.length - halfLength);
          
          if (secondHalfAvg > firstHalfAvg) {
            // Verificar cooldown (l√≥gica original)
            if (lastBuyTime) {
              const timeSinceLastBuy = (Date.now() - lastBuyTime.getTime()) / 1000;
              
              if (timeSinceLastBuy < this.config.buyCooldownSeconds) {
                return { 
                  shouldBuy: false, 
                  reason: `Cooldown ativo: ${Math.ceil(this.config.buyCooldownSeconds - timeSinceLastBuy)}s restantes` 
                };
              }
            }
            
            return {
              shouldBuy: true,
              strategy: 'buyAtLow',
              reason: 'Compra na m√≠nima hist√≥rica',
              details: {
                priceFromLow: priceFromLow.toFixed(2),
                dailyVariation: dailyVariation.toFixed(2),
                trendDirection: 'alta'
              }
            };
          }
        }
      }
      
      return { shouldBuy: false, reason: 'Condi√ß√µes n√£o atendidas para compra na m√≠nima' };
      
    } catch (error) {
      logger.error('Erro na estrat√©gia de compra na m√≠nima:', error);
      return { shouldBuy: false, reason: 'Erro na an√°lise' };
    }
  }

  /**
   * NOVA ESTRAT√âGIA - Comprar na queda da m√°xima
   * Compra quando o pre√ßo cai X% da m√°xima recente
   */
  shouldBuyOnDrop(priceHistory, currentPrice, dailyLow, dailyHigh, lastBuyTime) {
    try {
      if (!this.strategies.buyOnDrop.enabled) {
        return { shouldBuy: false, reason: 'Estrat√©gia desabilitada' };
      }

      // Verifica√ß√µes b√°sicas
      if (priceHistory.length < this.config.minHistoryForAnalysis) {
        return { shouldBuy: false, reason: 'Hist√≥rico insuficiente' };
      }

      if (dailyHigh === dailyLow) {
        return { shouldBuy: false, reason: 'Sem varia√ß√£o de pre√ßo' };
      }

      // Calcular a queda da m√°xima
      const dropFromHigh = ((dailyHigh - currentPrice) / dailyHigh) * 100;
      const requiredDrop = this.strategies.buyOnDrop.dropPercentage;

      if (dropFromHigh >= requiredDrop) {
        // Verificar se n√£o est√° muito pr√≥ximo da m√≠nima (evitar comprar no fundo)
        const priceFromLow = ((currentPrice - dailyLow) / dailyLow) * 100;
        
        // Se estiver muito pr√≥ximo da m√≠nima, deixar a estrat√©gia original atuar
        if (priceFromLow <= this.config.buyThresholdFromLow) {
          return { shouldBuy: false, reason: 'Muito pr√≥ximo da m√≠nima - estrat√©gia original deve atuar' };
        }

        // Verificar cooldown
        if (lastBuyTime) {
          const timeSinceLastBuy = (Date.now() - lastBuyTime.getTime()) / 1000;
          
          if (timeSinceLastBuy < this.config.buyCooldownSeconds) {
            return { 
              shouldBuy: false, 
              reason: `Cooldown ativo: ${Math.ceil(this.config.buyCooldownSeconds - timeSinceLastBuy)}s restantes` 
            };
          }
        }

        // Verificar tend√™ncia (opcional - pode ser mais flex√≠vel que a estrat√©gia original)
        const recentPrices = priceHistory
          .slice(-Math.min(5, this.config.recentTrendWindow)) // Janela menor para ser mais responsivo
          .map(p => p.price);

        if (recentPrices.length >= 3) {
          // Verificar se n√£o est√° em queda livre (prote√ß√£o adicional)
          const priceChange = ((recentPrices[recentPrices.length - 1] - recentPrices[0]) / recentPrices[0]) * 100;
          
          // Se estiver caindo mais de 2% muito rapidamente, aguardar estabiliza√ß√£o
          if (priceChange < -2.0) {
            return { shouldBuy: false, reason: 'Queda muito acentuada - aguardando estabiliza√ß√£o' };
          }
        }

        return {
          shouldBuy: true,
          strategy: 'buyOnDrop',
          reason: 'Compra na queda da m√°xima',
          details: {
            dropFromHigh: dropFromHigh.toFixed(2),
            requiredDrop: requiredDrop.toFixed(2),
            currentPrice: currentPrice,
            dailyHigh: dailyHigh
          }
        };
      }

      return { 
        shouldBuy: false, 
        reason: `Queda insuficiente: ${dropFromHigh.toFixed(2)}% < ${requiredDrop}%` 
      };
      
    } catch (error) {
      logger.error('Erro na estrat√©gia de compra na queda:', error);
      return { shouldBuy: false, reason: 'Erro na an√°lise' };
    }
  }

  /**
   * M√©todo principal para verificar se deve comprar
   * Combina todas as estrat√©gias de compra
   */
  shouldBuy(priceHistory, currentPrice, dailyLow, dailyHigh, lastBuyTime) {
    try {
      // Tentar estrat√©gia original primeiro (prioridade)
      const buyAtLowResult = this.shouldBuyAtLow(priceHistory, currentPrice, dailyLow, dailyHigh, lastBuyTime);
      
      if (buyAtLowResult.shouldBuy) {
        logger.info(`‚úÖ Estrat√©gia Original ativada: ${buyAtLowResult.reason}`);
        return buyAtLowResult;
      }

      // Se a estrat√©gia original n√£o ativar, tentar a nova estrat√©gia
      const buyOnDropResult = this.shouldBuyOnDrop(priceHistory, currentPrice, dailyLow, dailyHigh, lastBuyTime);
      
      if (buyOnDropResult.shouldBuy) {
        logger.info(`‚úÖ Nova Estrat√©gia ativada: ${buyOnDropResult.reason}`);
        return buyOnDropResult;
      }

      // Se nenhuma estrat√©gia ativar, retornar o motivo da estrat√©gia original
      return buyAtLowResult;
      
    } catch (error) {
      logger.error('Erro ao avaliar estrat√©gias de compra:', error);
      return { shouldBuy: false, reason: 'Erro na an√°lise das estrat√©gias' };
    }
  }

  /**
   * L√ìGICA DE VENDA - Mantida igual √† original
   * A venda segue a mesma l√≥gica para ambas as estrat√©gias
   */
  shouldSell(position, currentPrice) {
    try {
      const buyPrice = position.buyPrice;
      
      // Calcular lucro/preju√≠zo (l√≥gica original mantida)
      const sellAmount = position.quantity;
      const fees = this.calculateFees(buyPrice * position.quantity) + 
                   this.calculateFees(currentPrice * sellAmount);
      const netProfit = (currentPrice * sellAmount) - (buyPrice * position.quantity) - fees;
      const profitPercent = (netProfit / (buyPrice * position.quantity)) * 100;
      
      // Verificar meta de lucro (l√≥gica original)
      if (profitPercent >= this.config.dailyProfitTarget) {
        logger.info(`üéØ Meta de lucro atingida: ${profitPercent.toFixed(2)}% >= ${this.config.dailyProfitTarget}%`);
        return { shouldSell: true, reason: 'profit_target', profitPercent };
      }
      
      // Verificar stop loss (l√≥gica original)
      const lossPercent = ((buyPrice - currentPrice) / buyPrice) * 100;
      if (lossPercent >= this.config.stopLossPercent) {
        logger.warn(`üõë Stop loss ativado! Perda: ${lossPercent.toFixed(2)}%`);
        return { shouldSell: true, reason: 'stop_loss', lossPercent };
      }
      
      return { shouldSell: false };
      
    } catch (error) {
      logger.error('Erro ao verificar crit√©rios de venda:', error);
      return { shouldSell: false };
    }
  }

  /**
   * Calcular taxas (l√≥gica original mantida)
   */
  calculateFees(amount, isMaker = false) {
    const feeRate = isMaker ? this.config.makerFee : this.config.takerFee;
    return amount * feeRate;
  }

  /**
   * Atualizar configura√ß√µes das estrat√©gias
   */
  updateConfig(newConfig) {
    this.config = { ...this.config, ...newConfig };
    
    // Atualizar configura√ß√£o espec√≠fica da nova estrat√©gia
    if (newConfig.buyOnDropPercent !== undefined) {
      this.strategies.buyOnDrop.dropPercentage = newConfig.buyOnDropPercent;
      logger.info(`Estrat√©gia de queda atualizada: ${newConfig.buyOnDropPercent}%`);
    }
  }

  /**
   * Habilitar/desabilitar estrat√©gias
   */
  enableStrategy(strategyName, enabled = true) {
    if (this.strategies[strategyName]) {
      this.strategies[strategyName].enabled = enabled;
      logger.info(`Estrat√©gia ${strategyName} ${enabled ? 'habilitada' : 'desabilitada'}`);
    }
  }

  /**
   * Obter status das estrat√©gias
   */
  getStrategiesStatus() {
    return {
      strategies: this.strategies,
      config: {
        buyThresholdFromLow: this.config.buyThresholdFromLow,
        buyOnDropPercent: this.config.buyOnDropPercent || 0.7,
        dailyProfitTarget: this.config.dailyProfitTarget,
        stopLossPercent: this.config.stopLossPercent
      }
    };
  }
}